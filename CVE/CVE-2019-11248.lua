SCAN_TYPE = 3
URL_PATHS = {
    "debug/pprof/",
    "debug/pprof/goroutine?debug=1"
}
BODY_MATCH = {
    "Types of profiles available:",
    "Profile Descriptions",
    "goroutine profile: total"
}
VALID = false

local function send_report(url)
    CveReport:setName("CVE-2019-11248")
    CveReport:setDescription("The debugging endpoint /debug/pprof is exposed over the unauthenticated Kubelet healthz port. This debugging endpoint can potentially leak sensitive information such as internal Kubelet memory addresses and configuration, or for limited denial of service. Versions prior to 1.15.0, 1.14.4, 1.13.8, and 1.12.10 are affected. The issue is of medium severity, but not exposed by the default configuration.")
    CveReport:setRisk("high")
    CveReport:setUrl(url)
    Reports:addCveReport(CveReport)
    print_cve_report(CveReport)
end

local function scan_cve(target_path)
    local new_path = pathjoin(HttpMessage:Path(),target_path)
    local new_url = HttpMessage:urlJoin(new_path)
    local resp_status, resp = pcall(function ()
        return http:send("GET", new_url)
    end)
    if resp_status == true then
        local body = resp.body
        local url = resp.url
        for _,match_txt in ipairs(BODY_MATCH) do
            if str_contains(body,match_txt) == true then
                CveReport:addMatcher(match_txt,3)  -- 3 = response body
                send_report(url)
                VALID = true
            end
        end
    end
end

function main()
    for _, target_path in ipairs(URL_PATHS) do
        if VALID == false then
            scan_cve(target_path)
        end
    end
end
